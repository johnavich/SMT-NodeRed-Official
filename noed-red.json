[
    {
        "id": "fc56e1b3356d7679",
        "type": "cronplus",
        "z": "f8297485.d32748",
        "name": "Read Meter",
        "outputField": "payload",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 55 * * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 90,
        "y": 780,
        "wires": [
            [
                "57a30322b6ec3098"
            ]
        ]
    },
    {
        "id": "bddebf20da8a40a0",
        "type": "https-node",
        "z": "f8297485.d32748",
        "name": "Create Token",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://services.smartmetertexas.net/v2/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 450,
        "y": 780,
        "wires": [
            [
                "aaf5e5f64ae80d79",
                "6bd9b5931da0d2bc"
            ]
        ]
    },
    {
        "id": "57a30322b6ec3098",
        "type": "change",
        "z": "f8297485.d32748",
        "name": "Apply HTTP Config",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "basicauth_v2",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "application/json",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 780,
        "wires": [
            [
                "bddebf20da8a40a0",
                "f7629c4c53b0357f"
            ]
        ]
    },
    {
        "id": "aaf5e5f64ae80d79",
        "type": "debug",
        "z": "f8297485.d32748",
        "name": "Token",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 740,
        "wires": [
        ]
    },
    {
        "id": "6bd9b5931da0d2bc",
        "type": "change",
        "z": "f8297485.d32748",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "token_v2",
                "pt": "flow",
                "to": "payload.accessToken",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 780,
        "wires": [
            [
                "965dd4b2c9b3ecad"
            ]
        ]
    },
    {
        "id": "f7629c4c53b0357f",
        "type": "debug",
        "z": "f8297485.d32748",
        "name": "Token Payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 740,
        "wires": [
        ]
    },
    {
        "id": "c0b72d366335872b",
        "type": "function",
        "z": "f8297485.d32748",
        "name": "Create Auth and Payload",
        "func": "\n//this is going to change as of 8/23/2025.\n//The authentication schema is changing to use JWT tokens.\n//So, i need to change the auth from basic to bearer, and update it that way.\n\nvar auth=flow.get(\"token_v2\")\nvar body=flow.get(\"readjson\")\n\n/*\n\nmsg.payload = {\n  \"trans_id\": \"\",\n  \"requesterType\":\"RES\",\n  \"requestorID\":msg.username,\n  \"reportFormat\":\"JSON\",\n  //\"ESIIDMeterList\":[{\"esiid\": msg.esiid}],\n  //\"esiid\":[msg.esiid],\n  \"ESIID\": msg.esiid,\n  \"MeterNumber\": msg.meternumber,\n  \"deliveryMode\":\"API\",\n  \"SMTTermsandConditions\":\"Y\"\n};\n\n*/\n\n\n\nmsg.auth=\"Bearer \" + auth\n//body.trans_id=Math.floor(Math.random()*100)\nbody.trans_id=\"123\"\n//body.startDate=\"11/19/2022\"\n//body.endDate=\"11/19/2022\"\n//body.version=\"L\"\n//body.readingType=\"A\"\nbody.deliveryMode=\"api\"\nmsg.payload=body\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
        ],
        "x": 270,
        "y": 860,
        "wires": [
            [
                "4d39d6196f3e0e16"
            ]
        ]
    },
    {
        "id": "4d39d6196f3e0e16",
        "type": "change",
        "z": "f8297485.d32748",
        "name": "Apply HTTP Config v2",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "application/json",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "headers.authorization",
                "pt": "msg",
                "to": "auth",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "headers.accept",
                "pt": "msg",
                "to": "applictaion/json",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 860,
        "wires": [
            [
                "122230bd673ab65b",
                "43716514fb3d7288"
            ]
        ]
    },
    {
        "id": "122230bd673ab65b",
        "type": "https-node",
        "z": "f8297485.d32748",
        "name": "Request Read v2",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://services.smartmetertexas.net/v2/odr/",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 710,
        "y": 860,
        "wires": [
            [
                "766af934e6c8f141",
                "dc89461d763a89ec"
            ]
        ]
    },
    {
        "id": "dc89461d763a89ec",
        "type": "switch",
        "z": "f8297485.d32748",
        "name": "Request Good",
        "property": "payload.statusReason",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Request submitted successfully for further processing",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 900,
        "y": 860,
        "wires": [
            [
                "47f7cde6f8b32730",
                "e7fb66c74ea92917"
            ]
        ]
    },
    {
        "id": "47f7cde6f8b32730",
        "type": "change",
        "z": "f8297485.d32748",
        "name": "Waiting for Response",
        "rules": [
            {
                "t": "set",
                "p": "readrequested",
                "pt": "flow",
                "to": "1",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "correlationId",
                "pt": "flow",
                "to": "payload.correlationId",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 860,
        "wires": [
            [
            ]
        ]
    },
    {
        "id": "e7fb66c74ea92917",
        "type": "delay",
        "z": "f8297485.d32748",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1060,
        "y": 820,
        "wires": [
            [
                "a4c1c6dc90ed5b92"
            ]
        ]
    },
    {
        "id": "766af934e6c8f141",
        "type": "debug",
        "z": "f8297485.d32748",
        "name": "ODR Read",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 820,
        "wires": [
        ]
    },
    {
        "id": "43716514fb3d7288",
        "type": "debug",
        "z": "f8297485.d32748",
        "name": "Auth and Payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 820,
        "wires": [
        ]
    },
    {
        "id": "b6b56756423c5d0d",
        "type": "link in",
        "z": "f8297485.d32748",
        "name": "Begin ODR",
        "links": [
            "25e3c010bffebc60",
            "4bc9636989a1e893"
        ],
        "x": 75,
        "y": 860,
        "wires": [
            [
                "c0b72d366335872b"
            ]
        ]
    },
    {
        "id": "25e3c010bffebc60",
        "type": "link out",
        "z": "f8297485.d32748",
        "name": "Token Created",
        "mode": "link",
        "links": [
            "b6b56756423c5d0d"
        ],
        "x": 895,
        "y": 780,
        "wires": [
        ]
    },
    {
        "id": "a6779166c07768aa",
        "type": "function",
        "z": "f8297485.d32748",
        "name": "Create Auth and Payload",
        "func": "var auth=flow.get(\"token_v2\")\nvar body=flow.get(\"resultjson\")\nvar coreid=flow.get(\"correlationId\")\nvar newmsg={}\n/*\n\nmsg.payload = {\n  \"tran_id\":\"123\",\n  \"requestorID\": msg.username,\n  \"correlationId\":\"\",\n  \"SMTTermsandConditions\":\"Y\"\n};\n\n*/\n\n\nnewmsg.headers={}\nnewmsg.headers.authorization=\"Bearer \" + auth\nnewmsg.headers.accept=\"application/json\"\nbody.correlationId = coreid\n\nnewmsg.payload=body\n\nreturn newmsg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
        ],
        "x": 270,
        "y": 960,
        "wires": [
            [
                "fae4bb98c8dcc833"
            ]
        ]
    },
    {
        "id": "fae4bb98c8dcc833",
        "type": "https-node",
        "z": "f8297485.d32748",
        "name": "Get Reading",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://services.smartmetertexas.net/v2/odrstatus/",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": true,
        "x": 490,
        "y": 960,
        "wires": [
            [
                "fe83b5bb0b77b3c1"
            ]
        ]
    },
    {
        "id": "fe83b5bb0b77b3c1",
        "type": "switch",
        "z": "f8297485.d32748",
        "name": "Status Complete",
        "property": "payload.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PEN",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 790,
        "y": 960,
        "wires": [
            [
                "3285d0284758d29f"
            ],
            [
                "b00917910ccc1478"
            ],
            [
                "68bac7ae4a94c07b"
            ],
            [
                "5b37425e3fc29c0d"
            ]
        ]
    },
    {
        "id": "3285d0284758d29f",
        "type": "change",
        "z": "f8297485.d32748",
        "name": "Not Waiting for Response",
        "rules": [
            {
                "t": "set",
                "p": "readrequested",
                "pt": "flow",
                "to": "0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 900,
        "wires": [
            [
                "bf4f8315f552995d",
                "4541a23d1757ef72"
            ]
        ]
    },
    {
        "id": "b00917910ccc1478",
        "type": "change",
        "z": "f8297485.d32748",
        "name": "Not Waiting for Response",
        "rules": [
            {
                "t": "set",
                "p": "readrequested",
                "pt": "flow",
                "to": "0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 940,
        "wires": [
            [
                "331b3b67e0e0e6db"
            ]
        ]
    },
    {
        "id": "68bac7ae4a94c07b",
        "type": "delay",
        "z": "f8297485.d32748",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1100,
        "y": 980,
        "wires": [
            [
                "52aa7b96d3dfa420"
            ]
        ]
    },
    {
        "id": "5b37425e3fc29c0d",
        "type": "delay",
        "z": "f8297485.d32748",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1100,
        "y": 1020,
        "wires": [
            [
                "52aa7b96d3dfa420"
            ]
        ]
    },
    {
        "id": "bf4f8315f552995d",
        "type": "change",
        "z": "f8297485.d32748",
        "name": "Parse Reading",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.odrRead.registeredRead",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1340,
        "y": 900,
        "wires": [
            [
                "edb8387c437bda7c",
                "b931c567e2a3602c"
            ]
        ]
    },
    {
        "id": "4541a23d1757ef72",
        "type": "change",
        "z": "f8297485.d32748",
        "name": "Parse Correlation ID",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "correlationId",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1360,
        "y": 940,
        "wires": [
            [
                "cc3d36a0f0b2ca4d"
            ]
        ]
    },
    {
        "id": "331b3b67e0e0e6db",
        "type": "delay",
        "z": "f8297485.d32748",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1320,
        "y": 980,
        "wires": [
            [
                "4bc9636989a1e893"
            ]
        ]
    },
    {
        "id": "b931c567e2a3602c",
        "type": "debug",
        "z": "f8297485.d32748",
        "name": "Debug: Last Reading",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1580,
        "y": 860,
        "wires": [
        ]
    },
    {
        "id": "edb8387c437bda7c",
        "type": "mqtt out",
        "z": "f8297485.d32748",
        "name": "MQTT: Send Reading",
        "topic": "smt/reading",
        "qos": "",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9a7d5573.06f8d8",
        "x": 1580,
        "y": 900,
        "wires": [
        ]
    },
    {
        "id": "cc3d36a0f0b2ca4d",
        "type": "mqtt out",
        "z": "f8297485.d32748",
        "name": "MQTT: Record CorrelationID",
        "topic": "smt/correlationid",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9a7d5573.06f8d8",
        "x": 1600,
        "y": 940,
        "wires": [
        ]
    },
    {
        "id": "711edb5ebe0d4f31",
        "type": "link in",
        "z": "f8297485.d32748",
        "name": "ODRStatus",
        "links": [
            "a4c1c6dc90ed5b92",
            "52aa7b96d3dfa420"
        ],
        "x": 75,
        "y": 960,
        "wires": [
            [
                "a6779166c07768aa"
            ]
        ]
    },
    {
        "id": "a4c1c6dc90ed5b92",
        "type": "link out",
        "z": "f8297485.d32748",
        "name": "ODR Requested",
        "mode": "link",
        "links": [
            "711edb5ebe0d4f31"
        ],
        "x": 1175,
        "y": 820,
        "wires": [
        ]
    },
    {
        "id": "4bc9636989a1e893",
        "type": "link out",
        "z": "f8297485.d32748",
        "name": "ODR Requested",
        "mode": "link",
        "links": [
            "b6b56756423c5d0d"
        ],
        "x": 1425,
        "y": 980,
        "wires": [
        ]
    },
    {
        "id": "52aa7b96d3dfa420",
        "type": "link out",
        "z": "f8297485.d32748",
        "name": "ODR Requested",
        "mode": "link",
        "links": [
            "711edb5ebe0d4f31"
        ],
        "x": 1215,
        "y": 1020,
        "wires": [
        ]
    },
    {
        "id": "efa1ba5da08d80ee",
        "type": "inject",
        "z": "f8297485.d32748",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 900,
        "wires": [
            [
                "c0b72d366335872b"
            ]
        ]
    },
    {
        "id": "d69d6c27b5376861",
        "type": "inject",
        "z": "f8297485.d32748",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 1000,
        "wires": [
            [
                "a6779166c07768aa"
            ]
        ]
    },
    {
        "id": "965dd4b2c9b3ecad",
        "type": "delay",
        "z": "f8297485.d32748",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 800,
        "y": 780,
        "wires": [
            [
                "25e3c010bffebc60"
            ]
        ]
    },
    {
        "id": "ce66e4e963866c84",
        "type": "catch",
        "z": "f8297485.d32748",
        "name": "",
        "scope": [
            "122230bd673ab65b"
        ],
        "uncaught": false,
        "x": 70,
        "y": 940,
        "wires": [
            [
                "c0b72d366335872b"
            ]
        ]
    },
    {
        "id": "9a7d5573.06f8d8",
        "type": "mqtt-broker",
        "name": "MQTT",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "Node-Red",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {
        },
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {
        },
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {
        },
        "userProps": "",
        "sessionExpiry": ""
    }
]
